<?php

declare(strict_types=1);

namespace App\AST;

/**
 * Data Transfer Object (DTO) for storing information about a potential vulnerability.
 */
class VulnerabilityLocation
{
    public string $filePath;
    public int $startLine;
    public int $endLine;
    public string $codeSnippet; // The relevant part of the code, possibly multiple lines
    public string $vulnerableInputDescription; // e.g., "$_GET['file']", "'../../etc/passwd'"
    public string $sinkFunction; // e.g., "include", "file_get_contents"
    public string $cweId; // e.g., "CWE-22"
    public string $ruleName; // e.g., "Direct User Input In Sink", "Basic Path Traversal Pattern"
    public string $ruleDescription; // Detailed description from the rule

    public function __construct(
        string $filePath,
        int $startLine,
        int $endLine,
        string $codeSnippet,
        string $vulnerableInputDescription,
        string $sinkFunction,
        string $cweId,
        string $ruleName,
        string $ruleDescription
    ) {
        $this->filePath = $filePath;
        $this->startLine = $startLine;
        $this->endLine = $endLine;
        $this->codeSnippet = $codeSnippet;
        $this->vulnerableInputDescription = $vulnerableInputDescription;
        $this->sinkFunction = $sinkFunction;
        $this->cweId = $cweId;
        $this->ruleName = $ruleName;
        $this->ruleDescription = $ruleDescription;
    }

    /**
     * Provides a string representation of the vulnerability.
     */
    public function __toString(): string
    {
        return sprintf(
            "[%s] Rule: %s\nDescription: %s\nSink: %s | Input: %s\nFile: %s (Lines: %d-%d)\nCode Snippet:\n%s\n",
            $this->cweId,
            $this->ruleName,
            $this->ruleDescription,
            $this->sinkFunction,
            $this->vulnerableInputDescription,
            $this->filePath,
            $this->startLine,
            $this->endLine,
            trim($this->codeSnippet)
        );
    }

    /**
     * Converts the vulnerability location to an array, useful for JSON reporting.
     */
    public function toArray(): array
    {
        return [
            'cwe_id' => $this->cweId,
            'rule_name' => $this->ruleName,
            'rule_description' => $this->ruleDescription,
            'sink_function' => $this->sinkFunction,
            'vulnerable_input' => $this->vulnerableInputDescription,
            'file_path' => $this->filePath,
            'start_line' => $this->startLine,
            'end_line' => $this->endLine,
            'code_snippet' => $this->codeSnippet,
        ];
    }
}
